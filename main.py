import telebot
from telebot import types
import json
import os
import re
import time
import threading

# –¢–æ–∫–µ–Ω –∞–∑ environment variables
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –¥–∞—Ä environment variables —Ç–∞–Ω–∑–∏–º –Ω–∞—à—É–¥–∞–∞—Å—Ç!")

bot = telebot.TeleBot(BOT_TOKEN)

# –ö–∞–Ω–∞–ª–∏ –º—É“õ–∞—Ä—Ä–∞—Ä—à—É–¥–∞ –±–∞—Ä–æ–∏ –∏—Å—Ç–∏—Å–Ω–æ
ALLOWED_CHANNEL = "@VOLFHA"

# –§–∞–π–ª“≥–æ –±–∞—Ä–æ–∏ –Ω–∏–≥–æ“≥–¥–æ—Ä–∏–∏ –º–∞—ä–ª—É–º–æ—Ç
SETTINGS_FILE = "group_settings.json"

class GroupSettings:
    def __init__(self):
        self.load_settings()
    
    def load_settings(self):
        try:
            with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                self.settings = json.load(f)
        except FileNotFoundError:
            self.settings = {}
    
    def save_settings(self):
        with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.settings, f, ensure_ascii=False, indent=2)
    
    def get_group_settings(self, group_id):
        group_id = str(group_id)
        if group_id not in self.settings:
            self.settings[group_id] = {
                'required_channels': [],
                'banned_words': [],
                'links_only_admin': True
            }
            self.save_settings()
        return self.settings[group_id]
    
    def add_required_channel(self, group_id, channel):
        group_settings = self.get_group_settings(group_id)
        if channel not in group_settings['required_channels']:
            group_settings['required_channels'].append(channel)
            self.save_settings()
            return True
        return False
    
    def remove_required_channel(self, group_id, channel):
        group_settings = self.get_group_settings(group_id)
        if channel in group_settings['required_channels']:
            group_settings['required_channels'].remove(channel)
            self.save_settings()
            return True
        return False
    
    def add_banned_word(self, group_id, word):
        group_settings = self.get_group_settings(group_id)
        if word.lower() not in group_settings['banned_words']:
            group_settings['banned_words'].append(word.lower())
            self.save_settings()
            return True
        return False
    
    def remove_banned_word(self, group_id, word):
        group_settings = self.get_group_settings(group_id)
        if word.lower() in group_settings['banned_words']:
            group_settings['banned_words'].remove(word.lower())
            self.save_settings()
            return True
        return False

settings = GroupSettings()

# --- –§–£–ù–ö–°–ò–Ø“≤–û–ò –Å–†–ò–†–ê–°–û–ù ---

# ID-–∏ –∫–æ—Ä–±–∞—Ä–∏ –±–µ–Ω–æ–º (–≤–∞“õ—Ç–µ –∞–¥–º–∏–Ω –∞–∑ –Ω–æ–º–∏ –≥—É—Ä”Ø“≥ –º–µ–Ω–∞–≤–∏—Å–∞–¥)
GROUP_ANONYMOUS_BOT_ID = 1087968824

def is_admin(message):
    """
    –°–∞–Ω“∑–∏—à–∏ –≤–∞—Å–µ—ä—à—É–¥–∞–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—É–¥–∞–Ω–∏ –∫–æ—Ä–±–∞—Ä.
    “≤–æ–ª–∞—Ç–∏ –∞–¥–º–∏–Ω“≥–æ–∏ –±–µ–Ω–æ–º—Ä–æ –Ω–∏–∑ –±–∞ –Ω–∞–∑–∞—Ä –º–µ–≥–∏—Ä–∞–¥.
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    if user_id == GROUP_ANONYMOUS_BOT_ID:
        return True

    try:
        chat_member = bot.get_chat_member(chat_id, user_id)
        return chat_member.status in ['administrator', 'creator']
    except Exception as e:
        print(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Å–∞–Ω“∑–∏—à–∏ —Å—Ç–∞—Ç—É—Å–∏ –∞–¥–º–∏–Ω: {e}")
        return False

def check_subscription(user_id, channels):
    """–°–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞ –±—É–¥–∞–Ω –¥–∞—Ä –∫–∞–Ω–∞–ª“≥–æ"""
    for channel in channels:
        try:
            member = bot.get_chat_member(channel, user_id)
            if member.status in ['left', 'kicked']:
                return False, channel
        except:
            return False, channel
    return True, None

def contains_link(text):
    """–°–∞–Ω“∑–∏—à–∏ –º–∞–≤“∑—É–¥–∏—è—Ç–∏ –ª–∏–Ω–∫ –¥–∞—Ä –º–∞—Ç–Ω"""
    url_pattern = re.compile(
        r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
        r'|(?:^|[^@\w])@[a-zA-Z0-9_]{1,15}(?![a-zA-Z0-9_])'
        r'|(?:^|[^@\w])t\.me/[a-zA-Z0-9_]{1,32}'
    )
    return bool(url_pattern.search(text))

def is_from_allowed_channel(text):
    """–°–∞–Ω“∑–∏—à–∏ –ª–∏–Ω–∫ –∞–∑ –∫–∞–Ω–∞–ª–∏ –∏“∑–æ–∑–∞—Ç–¥–æ–¥–∞—à—É–¥–∞"""
    return ALLOWED_CHANNEL.lower() in text.lower()

def delete_message_after(delay, chat_id, message_id):
    """–§—É–Ω–∫—Å–∏—è –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –ø–∞—ë–º –±–∞—ä–¥–∏ —è–∫ –º—É–¥–¥–∞—Ç–∏ –º—É–∞–π—è–Ω –¥–∞—Ä –ø–æ—Ç–æ–∫–∏ –∞–ª–æ“≥–∏–¥–∞."""
    def task():
        time.sleep(delay)
        try:
            bot.delete_message(chat_id, message_id)
        except:
            pass
    threading.Thread(target=task).start()

# --- –§–ê–†–ú–û–ù“≤–û ---

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if message.chat.type != 'private':
        return
    
    help_text = """
ü§ñ –ë–æ—Ç–∏ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –≥—É—Ä”Ø“≥

–§–∞—Ä–º–æ–Ω“≥–æ–∏ –∞–¥–º–∏–Ω:
/add_channel @channel - –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª –±–∞—Ä–æ–∏ –æ–±—É–Ω–∞
/remove_channel @channel - –•–æ—Ä–∏“∑ –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª
/list_channels - –†”Ø–π—Ö–∞—Ç–∏ –∫–∞–Ω–∞–ª“≥–æ
/add_word –∫–∞–ª–∏–º–∞ - –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–ª–∏–º–∞–∏ –º–∞–º–Ω”Ø—ä
/remove_word –∫–∞–ª–∏–º–∞ - –•–æ—Ä–∏“∑ –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–ª–∏–º–∞–∏ –º–∞–º–Ω”Ø—ä
/list_words - –†”Ø–π—Ö–∞—Ç–∏ –∫–∞–ª–∏–º–∞“≥–æ–∏ –º–∞–º–Ω”Ø—ä

–•—É—Å—É—Å–∏—è—Ç“≥–æ:
‚úÖ –°–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞ –¥–∞—Ä –∫–∞–Ω–∞–ª“≥–æ
‚úÖ –§–∏–ª—Ç—Ä–∏ –∫–∞–ª–∏–º–∞“≥–æ–∏ –º–∞–º–Ω”Ø—ä
‚úÖ –ú–∞“≥–¥—É–¥–∏—è—Ç–∏ –ª–∏–Ω–∫ –±–∞—Ä–æ–∏ “ì–∞–π—Ä–∏–∞–¥–º–∏–Ω“≥–æ
‚úÖ –®–∏–Ω–æ—Ö—Ç–∞–Ω–∏ –∞–¥–º–∏–Ω“≥–æ–∏ –±–µ–Ω–æ–º –≤–∞ –ø–∞—ë–º“≥–æ–∏ –∫–∞–Ω–∞–ª
‚úÖ –ò—Å—Ç–∏—Å–Ω–æ–∏ –∫–∞–Ω–∞–ª–∏ @VOLFHA
    """
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['add_channel'])
def add_channel(message):
    if not is_admin(message):
        bot.reply_to(message, "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä“≥–æ –∏–Ω —Ñ–∞—Ä–º–æ–Ω—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±—É—Ä–¥–∞ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥!")
        return
    
    try:
        channel = message.text.split()[1]
        if not channel.startswith('@'):
            channel = '@' + channel
        
        if settings.add_required_channel(message.chat.id, channel):
            bot.reply_to(message, f"‚úÖ –ö–∞–Ω–∞–ª–∏ {channel} –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ —à—É–¥!")
        else:
            bot.reply_to(message, f"‚ö†Ô∏è –ö–∞–Ω–∞–ª–∏ {channel} –∞–ª–ª–∞–∫–∞–π –¥–∞—Ä —Ä”Ø–π—Ö–∞—Ç –∞—Å—Ç!")
    except IndexError:
        bot.reply_to(message, "‚ùå –ò—Å—Ç–∏—Ñ–æ–¥–∞: /add_channel @channel_name")

@bot.message_handler(commands=['remove_channel'])
def remove_channel(message):
    if not is_admin(message):
        bot.reply_to(message, "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä“≥–æ –∏–Ω —Ñ–∞—Ä–º–æ–Ω—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±—É—Ä–¥–∞ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥!")
        return
    
    try:
        channel = message.text.split()[1]
        if not channel.startswith('@'):
            channel = '@' + channel
        
        if settings.remove_required_channel(message.chat.id, channel):
            bot.reply_to(message, f"‚úÖ –ö–∞–Ω–∞–ª–∏ {channel} —Ö–æ—Ä–∏“∑ –∫–∞—Ä–¥–∞ —à—É–¥!")
        else:
            bot.reply_to(message, f"‚ö†Ô∏è –ö–∞–Ω–∞–ª–∏ {channel} –¥–∞—Ä —Ä”Ø–π—Ö–∞—Ç –Ω–µ—Å—Ç!")
    except IndexError:
        bot.reply_to(message, "‚ùå –ò—Å—Ç–∏—Ñ–æ–¥–∞: /remove_channel @channel_name")

@bot.message_handler(commands=['list_channels'])
def list_channels(message):
    if not is_admin(message):
        bot.reply_to(message, "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä“≥–æ –∏–Ω —Ñ–∞—Ä–º–æ–Ω—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±—É—Ä–¥–∞ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥!")
        return
    
    group_settings = settings.get_group_settings(message.chat.id)
    channels = group_settings['required_channels']
    
    if channels:
        channels_text = "\n".join([f"‚Ä¢ {channel}" for channel in channels])
        bot.reply_to(message, f"üìã –ö–∞–Ω–∞–ª“≥–æ–∏ —Ç–∞–ª–∞–±—à—É–¥–∞:\n{channels_text}")
    else:
        bot.reply_to(message, "üìã –Ø–≥–æ–Ω –∫–∞–Ω–∞–ª —Ç–∞–Ω–∑–∏–º –Ω–∞—à—É–¥–∞–∞—Å—Ç!")

@bot.message_handler(commands=['add_word'])
def add_banned_word(message):
    if not is_admin(message):
        bot.reply_to(message, "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä“≥–æ –∏–Ω —Ñ–∞—Ä–º–æ–Ω—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±—É—Ä–¥–∞ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥!")
        return
    
    try:
        word = ' '.join(message.text.split()[1:])
        if not word:
            raise IndexError
        
        if settings.add_banned_word(message.chat.id, word):
            bot.reply_to(message, f"‚úÖ –ö–∞–ª–∏–º–∞–∏ '{word}' –±–∞ —Ä”Ø–π—Ö–∞—Ç–∏ –º–∞–º–Ω”Ø—ä –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ —à—É–¥!")
        else:
            bot.reply_to(message, f"‚ö†Ô∏è –ö–∞–ª–∏–º–∞–∏ '{word}' –∞–ª–ª–∞–∫–∞–π –¥–∞—Ä —Ä”Ø–π—Ö–∞—Ç –∞—Å—Ç!")
    except IndexError:
        bot.reply_to(message, "‚ùå –ò—Å—Ç–∏—Ñ–æ–¥–∞: /add_word –∫–∞–ª–∏–º–∞–∏ –º–∞–º–Ω”Ø—ä")

@bot.message_handler(commands=['remove_word'])
def remove_banned_word(message):
    if not is_admin(message):
        bot.reply_to(message, "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä“≥–æ –∏–Ω —Ñ–∞—Ä–º–æ–Ω—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±—É—Ä–¥–∞ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥!")
        return
    
    try:
        word = ' '.join(message.text.split()[1:])
        if not word:
            raise IndexError
        
        if settings.remove_banned_word(message.chat.id, word):
            bot.reply_to(message, f"‚úÖ –ö–∞–ª–∏–º–∞–∏ '{word}' –∞–∑ —Ä”Ø–π—Ö–∞—Ç–∏ –º–∞–º–Ω”Ø—ä —Ö–æ—Ä–∏“∑ –∫–∞—Ä–¥–∞ —à—É–¥!")
        else:
            bot.reply_to(message, f"‚ö†Ô∏è –ö–∞–ª–∏–º–∞–∏ '{word}' –¥–∞—Ä —Ä”Ø–π—Ö–∞—Ç –Ω–µ—Å—Ç!")
    except IndexError:
        bot.reply_to(message, "‚ùå –ò—Å—Ç–∏—Ñ–æ–¥–∞: /remove_word –∫–∞–ª–∏–º–∞–∏ –º–∞–º–Ω”Ø—ä")

@bot.message_handler(commands=['list_words'])
def list_banned_words(message):
    if not is_admin(message):
        bot.reply_to(message, "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä“≥–æ –∏–Ω —Ñ–∞—Ä–º–æ–Ω—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±—É—Ä–¥–∞ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥!")
        return
    
    group_settings = settings.get_group_settings(message.chat.id)
    words = group_settings['banned_words']
    
    if words:
        words_text = "\n".join([f"‚Ä¢ {word}" for word in words])
        bot.reply_to(message, f"üö´ –ö–∞–ª–∏–º–∞“≥–æ–∏ –º–∞–º–Ω”Ø—ä:\n{words_text}")
    else:
        bot.reply_to(message, "üö´ –Ø–≥–æ–Ω –∫–∞–ª–∏–º–∞–∏ –º–∞–º–Ω”Ø—ä —Ç–∞–Ω–∑–∏–º –Ω–∞—à—É–¥–∞–∞—Å—Ç!")

# --- –ö–û–†–ö–ê–†–î–ò –ü–ê–Å–ú“≤–û –í–ê –ú–ï–î–ò–ê ---

@bot.message_handler(content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'sticker'])
def handle_all_messages(message):
    # –¢–∞–Ω“≥–æ –¥–∞—Ä –≥—É—Ä”Ø“≥“≥–æ –∫–æ—Ä –º–µ–∫—É–Ω–∞–¥
    if message.chat.type == 'private':
        return

    # –ê–≥–∞—Ä –ø–∞—ë–º –∞–∑ –Ω–æ–º–∏ –∫–∞–Ω–∞–ª —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥–∞ –±–æ—à–∞–¥, –æ–Ω—Ä–æ –Ω–æ–¥–∏–¥–∞ –º–µ–≥–∏—Ä–µ–º.
    # –ò–Ω“≥–æ –ø–æ—Å—Ç“≥–æ–∏ —Ö—É–¥–∏ –∫–∞–Ω–∞–ª –º–µ–±–æ—à–∞–Ω–¥, –∫–∏ –¥–∞—Ä –≥—É—Ä”Ø“≥ –ø–∞–π–¥–æ –º–µ—à–∞–≤–∞–Ω–¥.
    if message.sender_chat:
        return

    # –ê–≥–∞—Ä —Ñ–∏—Ä–∏—Å—Ç–∞–Ω–¥–∞ –∞–¥–º–∏–Ω –±–æ—à–∞–¥, “≥–µ“∑ –∫–æ—Ä –Ω–∞–º–µ–∫—É–Ω–µ–º
    if is_admin(message):
        return
    
    group_settings = settings.get_group_settings(message.chat.id)
    message_text = (message.text or message.caption or "").lower()
    
    # 1. –°–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞ –¥–∞—Ä –∫–∞–Ω–∞–ª“≥–æ
    required_channels = group_settings['required_channels']
    if required_channels:
        if message.from_user.id != GROUP_ANONYMOUS_BOT_ID:
            subscribed, missing_channel = check_subscription(message.from_user.id, required_channels)
            if not subscribed:
                try:
                    bot.delete_message(message.chat.id, message.message_id)
                    warning_msg = bot.send_message(
                        message.chat.id,
                        f"‚ö†Ô∏è @{message.from_user.username or message.from_user.first_name}, "
                        f"–±–∞—Ä–æ–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º –±–æ—è–¥ –±–∞ –∫–∞–Ω–∞–ª–∏ {missing_channel} –æ–±—É–Ω–∞ —à–∞–≤–µ–¥!"
                    )
                    delete_message_after(10, message.chat.id, warning_msg.message_id)
                except:
                    pass
                return

    # 2. –°–∞–Ω“∑–∏—à–∏ –∫–∞–ª–∏–º–∞“≥–æ–∏ –º–∞–º–Ω”Ø—ä
    banned_words = group_settings['banned_words']
    for word in banned_words:
        if word in message_text:
            try:
                bot.delete_message(message.chat.id, message.message_id)
                warning_msg = bot.send_message(
                    message.chat.id,
                    f"‚ö†Ô∏è @{message.from_user.username or message.from_user.first_name}, "
                    f"–∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –∫–∞–ª–∏–º–∞ –º–∞–º–Ω”Ø—ä –∞—Å—Ç!"
                )
                delete_message_after(5, message.chat.id, warning_msg.message_id)
            except:
                pass
            return
    
    # 3. –°–∞–Ω“∑–∏—à–∏ –ª–∏–Ω–∫“≥–æ (—Ç–∞–Ω“≥–æ –±–∞—Ä–æ–∏ –º–∞—Ç–Ω)
    if message.content_type == 'text' and contains_link(message.text):
        if not is_from_allowed_channel(message.text):
            try:
                bot.delete_message(message.chat.id, message.message_id)
                warning_msg = bot.send_message(
                    message.chat.id,
                    f"‚ö†Ô∏è @{message.from_user.username or message.from_user.first_name}, "
                    f"—Ç–∞–Ω“≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä“≥–æ –ª–∏–Ω–∫ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥!"
                )
                delete_message_after(5, message.chat.id, warning_msg.message_id)
            except:
                pass

@bot.message_handler(content_types=['new_chat_members'])
def welcome_new_members(message):
    """–ü–∞—ë–º–∏ —Ö”Ø—à –æ–º–∞–¥–µ–¥ –±–∞—Ä–æ–∏ –∞—ä–∑–æ—ë–Ω–∏ –Ω–∞–≤"""
    if message.chat.type == 'private':
        return
    
    for new_member in message.new_chat_members:
        if new_member.id == bot.get_me().id:
            bot.send_message(
                message.chat.id,
                "ü§ñ –°–∞–ª–æ–º! –ú–∞–Ω –±–æ—Ç–∏ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –≥—É—Ä”Ø“≥ “≥–∞—Å—Ç–∞–º.\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä“≥–æ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥ –∞–∑ —Ñ–∞—Ä–º–æ–Ω“≥–æ–∏ –º–∞–Ω –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–∞–Ω–¥.\n"
                "–ë–∞—Ä–æ–∏ –∫”Ø–º–∞–∫ /help-—Ä–æ –¥–∞—Ä –ø–∞—ë–º–∏ —Ö—É—Å—É—Å”£ —Ñ–∏—Ä–∏—Å—Ç–µ–¥."
            )
            continue
        
        name = new_member.first_name
        username = f"@{new_member.username}" if new_member.username else name
        
        welcome_text = f"üéâ –•”Ø—à –æ–º–∞–¥–µ–¥, {username}!\n\n"
        
        group_settings = settings.get_group_settings(message.chat.id)
        required_channels = group_settings['required_channels']
        
        if required_channels:
            welcome_text += "üì¢ –ë–∞—Ä–æ–∏ –∏—à—Ç–∏—Ä–æ–∫ –¥–∞—Ä –º—É“≥–æ–∫–∏–º–∞“≥–æ, –ª—É—Ç—Ñ–∞–Ω –±–∞ –∫–∞–Ω–∞–ª“≥–æ–∏ –∑–µ—Ä–∏–Ω –æ–±—É–Ω–∞ —à–∞–≤–µ–¥:\n"
            for channel in required_channels:
                welcome_text += f"‚Ä¢ {channel}\n"
            welcome_text += "\n"
        
        welcome_text += "üìã “ö–æ–∏–¥–∞“≥–æ–∏ –≥—É—Ä”Ø“≥—Ä–æ –º—É—Ç–æ–ª–∏–∞ –∫—É–Ω–µ–¥ –≤–∞ –æ–Ω“≥–æ—Ä–æ —Ä–∏–æ—è –Ω–∞–º–æ–µ–¥!"
        
        try:
            welcome_msg = bot.send_message(message.chat.id, welcome_text)
            delete_message_after(120, message.chat.id, welcome_msg.message_id)
        except:
            pass

# --- –•–ê–¢–û–ì–ò“≤–û –í–ê RESTART ---

def handle_error(func):
    """Decorator –±–∞—Ä–æ–∏ –∫–æ—Ä–∫–∞—Ä–¥–∏ —Ö–∞—Ç–æ–≥–∏“≥–æ"""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            print(f"–•–∞—Ç–æ–≥”£ –¥–∞—Ä {func.__name__}: {e}")
            return None
    return wrapper

@handle_error
def start_bot():
    """–§—É–Ω–∫—Å–∏—è–∏ –∞—Å–æ—Å–∏–∏ –æ“ì–æ–∑–∏ –±–æ—Ç"""
    print("ü§ñ –ë–æ—Ç –¥–∞—Ä Render.com –æ“ì–æ–∑ —ë—Ñ—Ç...")
    print(f"üîë –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...")
    
    # –°–∞–Ω“∑–∏—à–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–∞ API
    try:
        bot_info = bot.get_me()
        print(f"‚úÖ –ë–æ—Ç {bot_info.username} –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –≤–∞—Å–ª —à—É–¥!")
    except Exception as e:
        print(f"‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –≤–∞—Å–ª —à—É–¥–∞–Ω: {e}")
        return False
    
    # –û“ì–æ–∑–∏ polling
    bot.polling(none_stop=True, interval=1, timeout=20)
    return True

# --- –û“í–û–ó–ò –ö–û–† ---

if __name__ == "__main__":
    # –ö”Ø—à–∏—à–∏ –æ“ì–æ–∑ –±–æ restart –∞–≤—Ç–æ–º–∞—Ç”£
    max_retries = 5
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            if start_bot():
                break
        except Exception as e:
            retry_count += 1
            print(f"‚ùå –•–∞—Ç–æ–≥”£ “∑–∏–¥–¥”£ (–∫”Ø—à–∏—à {retry_count}/{max_retries}): {e}")
            if retry_count < max_retries:
                print("üîÑ Restart –±–∞—ä–¥–∏ 30 —Å–æ–Ω–∏—è...")
                time.sleep(30)
            else:
                print("üí• –ë–æ—Ç –Ω–∞—à—É–¥!")
                break
